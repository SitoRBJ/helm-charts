{{- include "srox.init" . -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sensor
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "srox.labels" (list . "deployment" "sensor") | nindent 4 }}
    app: sensor
    auto-upgrade.stackrox.io/component: "sensor"
  annotations:
    {{- include "srox.annotations" (list . "deployment" "sensor") | nindent 4 }}
spec:
  replicas: 1
  minReadySeconds: 15
  selector:
    matchLabels:
      app: sensor
  strategy:
    type: Recreate
  template:
    metadata:
      namespace: {{ .Release.Namespace }}
      labels:
        app: sensor
        {{- include "srox.podLabels" (list . "deployment" "sensor") | nindent 8 }}
      annotations:
        traffic.sidecar.istio.io/excludeInboundPorts: "8443,9443"
        {{- include "srox.podAnnotations" (list . "deployment" "sensor") | nindent 8 }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            # Sensor is single-homed, so avoid preemptible nodes.
            - weight: 100
              preference:
                matchExpressions:
                  - key: cloud.google.com/gke-preemptible
                    operator: NotIn
                    values:
                    - "true"
            {{- if ._rox.env.openshift }}
            - weight: 25
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/compute
                    operator: In
                    values:
                    - "true"
            - weight: 75
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/infra
                    operator: NotIn
                    values:
                    - "true"
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: NotIn
                    values:
                    - "true"
            {{- end}}
      securityContext:
        runAsUser: 4000
        fsGroup: 4000
      {{- if not ._rox.env.openshift }}
      imagePullSecrets:
      {{- range $secretName := ._rox.mainImagePullSecrets._names }}
      - name: {{ quote $secretName }}
      {{- end }}
      {{- end }}
      serviceAccount: sensor
      containers:
      - image: {{ printf "%s/%s:%s" ._rox.sensor.image.registry ._rox.sensor.image.name ._rox.sensor.image.tag }}
        imagePullPolicy: {{ ._rox.sensor.image.pullPolicy }}
        name: sensor
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /admissioncontroller
            port: 9443
        ports:
          - containerPort: 8443
            name: api
          - containerPort: 9443
            name: webhook
        command:
          - kubernetes-sensor
        resources:
          {{- ._rox.sensor._resources | nindent 10 }}
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        env:
        - name: ROX_CENTRAL_ENDPOINT
          value: {{ ._rox.centralEndpoint }}
        - name: ROX_ADVERTISED_ENDPOINT
          value: {{ ._rox.sensor.endpoint }}
        {{- if ._rox.env.openshift }}
        - name: ROX_OPENSHIFT_API
          value: "true"
        {{- end}}
        {{- include "srox.envVars" (list . "deployment" "sensor" "sensor") | nindent 8 }}
        volumeMounts:
        - name: varlog
          mountPath: /var/log/stackrox/
        - name: sensor-etc-ssl-volume
          mountPath: /etc/ssl/
        - name: sensor-etc-pki-volume
          mountPath: /etc/pki/ca-trust/
        - name: certs
          mountPath: /run/secrets/stackrox.io/certs/
          readOnly: true
        - name: additional-ca-volume
          mountPath: /usr/local/share/ca-certificates/
          readOnly: true
      volumes:
      - name: certs
        secret:
          secretName: sensor-tls
          items:
          - key: sensor-cert.pem
            path: cert.pem
          - key: sensor-key.pem
            path: key.pem
          - key: ca.pem
            path: ca.pem
      - name: sensor-etc-ssl-volume
        emptyDir: {}
      - name: sensor-etc-pki-volume
        emptyDir: {}
      - name: additional-ca-volume
        secret:
          secretName: additional-ca-sensor
          optional: true
      - name: varlog
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: sensor
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "srox.labels" (list . "service" "sensor") | nindent 4 }}
    auto-upgrade.stackrox.io/component: "sensor"
  annotations:
    {{- include "srox.annotations" (list . "service" "sensor") | nindent 4 }}
spec:
  ports:
  - name: https
    port: 443
    targetPort: api
    protocol: TCP
  {{- if ._rox.sensor.exposeMonitoring }}
  - name: monitoring
    port: 9090
    targetPort: 9090
    protocol: TCP
  {{- end }}
  selector:
    app: sensor
  type: ClusterIP
  sessionAffinity: None
{{- if ._rox.env.istio }}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: sensor-internal-no-istio-mtls
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "srox.labels" (list . "destinationrule" "sensor-internal-no-istio-mtls") | nindent 4 }}
  annotations:
    {{- include "srox.annotations" (list . "destinationrule" "sensor-internal-no-istio-mtls") | nindent 4 }}
    stackrox.io/description: "Disable Istio mTLS for port 443, since StackRox services use built-in mTLS."
spec:
  host: sensor.stackrox.svc.cluster.local
  trafficPolicy:
    portLevelSettings:
      - port:
          number: 443
        tls:
          mode: DISABLE
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: sensor-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "srox.labels" (list . "service" "sensor-webhook") | nindent 4 }}
    auto-upgrade.stackrox.io/component: "sensor"
  annotations:
    {{- include "srox.annotations" (list . "service" "sensor-webhook") | nindent 4 }}
spec:
  ports:
  - name: https
    port: 443
    targetPort: webhook
    protocol: TCP
  selector:
    app: sensor
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    {{- include "srox.labels" (list . "daemonset" "collector") | nindent 4 }}
    service: collector
    app: collector
    auto-upgrade.stackrox.io/component: "sensor"
  annotations:
    {{- include "srox.annotations" (list . "daemonset" "collector") | nindent 4 }}
  name: collector
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      service: collector
  template:
    metadata:
      namespace: {{ .Release.Namespace }}
      labels:
        service: collector
        app: collector
        {{- include "srox.podLabels" (list . "daemonset" "collector") | nindent 8 }}
      annotations:
        {{- include "srox.podAnnotations" (list . "daemonset" "collector") | nindent 8 }}
    spec:
      {{- if not ._rox.collector.disableTaintTolerations }}
      tolerations:
      - operator: "Exists"
      {{- end}}
      serviceAccount: collector
      containers:
      {{- if ne ._rox.collector.collectionMethod "NO_COLLECTION"}}
      - name: collector
        {{- if kindIs "invalid" ._rox.collector.image.tag }}
        {{/* No custom tag set, use standard image selection logic. */}}
        {{- if ._rox.collector.slimMode }}
        image: {{ printf "%s/%s:%s-slim" ._rox.collector.image.registry ._rox.collector.image.name ._rox.collector.image.version }}
        {{- else }}
        image: {{ printf "%s/%s:%s-latest" ._rox.collector.image.registry ._rox.collector.image.name ._rox.collector.image.version }}
        {{- end }}
        {{- else }}
        image: {{ printf "%s/%s:%s" ._rox.collector.image.registry ._rox.collector.image.name ._rox.collector.image.tag }}
        {{- end }}
        imagePullPolicy: {{ ._rox.collector.image.pullPolicy }}
        env:
        - name: COLLECTOR_CONFIG
          value: '{"tlsConfig":{"caCertPath":"/var/run/secrets/stackrox.io/certs/ca.pem","clientCertPath":"/var/run/secrets/stackrox.io/certs/cert.pem","clientKeyPath":"/var/run/secrets/stackrox.io/certs/key.pem"}}'
        - name: COLLECTION_METHOD
          value: {{ ._rox.collector.collectionMethod }}
        - name: GRPC_SERVER
          value: {{ ._rox.sensor.endpoint }}
        {{- include "srox.envVars" (list . "daemonset" "collector" "collector") | nindent 8 }}
        resources:
          {{- ._rox.collector._resources | nindent 10 }}
        securityContext:
          capabilities:
            drop:
            - NET_RAW
          privileged: true
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /host/var/run/docker.sock
          name: var-run-docker-sock
          readOnly: true
        - mountPath: /host/proc
          name: proc-ro
          readOnly: true
        - mountPath: /module
          name: tmpfs-module
        - mountPath: /host/etc
          name: etc-ro
          readOnly: true
        - mountPath: /host/usr/lib
          name: usr-lib-ro
          readOnly: true
        - mountPath: /host/sys
          name: sys-ro
          readOnly: true
        - mountPath: /host/dev
          name: dev-ro
          readOnly: true
        - mountPath: /run/secrets/stackrox.io/certs/
          name: certs
          readOnly: true
      {{- end }}
      - command:
        - stackrox/compliance
        env:
        - name: ROX_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: ROX_ADVERTISED_ENDPOINT
          value: {{ ._rox.sensor.endpoint | quote }}
        image: {{ printf "%s/%s:%s" ._rox.sensor.image.registry ._rox.sensor.image.name ._rox.sensor.image.tag }}
        imagePullPolicy: {{ ._rox.sensor.image.pullPolicy }}
        name: compliance
        resources:
          {{- ._rox.collector._complianceResources | nindent 10 }}
        securityContext:
          runAsUser: 0
          readOnlyRootFilesystem: true
          seLinuxOptions:
            type: "container_runtime_t"
        volumeMounts:
        - mountPath: /etc/ssl/
          name: etc-ssl
        - mountPath: /etc/pki/ca-trust/
          name: etc-pki-volume
        - mountPath: /host
          name: host-root-ro
          readOnly: true
        - mountPath: /run/secrets/stackrox.io/certs/
          name: certs
          readOnly: true
      volumes:
      - hostPath:
          path: /var/run/docker.sock
        name: var-run-docker-sock
      - hostPath:
          path: /proc
        name: proc-ro
      - emptyDir:
          medium: Memory
        name: tmpfs-module
      - hostPath: 
          path: /etc
        name: etc-ro
      - hostPath: 
          path: /usr/lib
        name: usr-lib-ro
      - hostPath: 
          path: /sys/
        name: sys-ro
      - hostPath:
          path: /dev
        name: dev-ro
      - name: certs
        secret:
          secretName: collector-tls
          items:
          - key: collector-cert.pem
            path: cert.pem
          - key: collector-key.pem
            path: key.pem
          - key: ca.pem
            path: ca.pem
      - hostPath:
          path: /
        name: host-root-ro
      - name: etc-ssl
        emptyDir: {}
      - name: etc-pki-volume
        emptyDir: {}
